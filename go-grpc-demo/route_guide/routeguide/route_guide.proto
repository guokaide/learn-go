syntax = "proto3";

option go_package = "example/go-grpc-demo/route_guide/routeguide";

package routeguide;

// Define service
service RouteGuide {
  // A simple RPC.
  //
  // Obtains the feature at a given position.
  rpc GetFeature(Point) returns (Feature) {}

  // A server-side streaming RPC.
  //
  // Obtains the Features available within the given Rectangle. Results are
  // streamed rather than returned at once, as the rectangle may cover a large
  // area and contain a huge number of features.
  rpc ListFeatures(Rectangle) returns (stream Feature) {}

  // A client-side streaming RPC.
  //
  // Accepts a stream of Points on a route being traversed, returning a
  // RouteSummary when traversal is completed.
  rpc RecordRoute(stream Point) returns (RouteSummary) {}

  // A bidirectional streaming RPC.
  //
  // Accepts a stream of RouteNotes sent while a route is being traversed,
  // while receiving other RouteNotes (e.g. from other users)
  rpc RouteChat(stream RouteNote) returns (stream RouteNote) {}
}

// Points are represented as latitude-longitude pairs in the E7 representation.
// (degrees multiplied by 10**7 and rounded to the nearest integer).
// Latitudes should be in the range +/- 90 degrees and longitude should be in
// the range +/- 180 degrees (inclusive).
message Point {
  int32 latitude = 1;
  int32 longitude = 2;
}

// A latitude-longitude rectangle, represented as two diagonally opposite
// points "lo" and "hi".
message Rectangle {
  Point lo = 1;
  Point hi = 2;
}

// A feature names something at a given point.
//
// If a feature could not be named, the name is empty.
message Feature {
  string name = 1;
  Point location = 2;
}

// A RouteNote is a message sent while at a given point.
message RouteNote {
  Point location = 1;
  string message = 2;
}

// A RouteSummary is received in response to a RecordRoute rpc.
message RouteSummary {
  // The number of points received.
  int32 point_count = 1;

  // The number of known features passed while traversing the route.
  int32 feature_count = 2;

  // The distance covered in metres.
  int32 distance = 3;

  // The duration of the traversal in seconds;
  int32 elapsed_time = 4;
}
